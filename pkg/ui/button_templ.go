// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package ui

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/dimmerz92/templwind/pkg/lib"
import "github.com/dimmerz92/templwind/pkg/themes"
import tw "github.com/Oudwins/tailwind-merge-go/pkg/twmerge"

type ButtonType string

const (
	Reset  ButtonType = "reset"
	Submit ButtonType = "submit"
)

type ButtonStyle string

const (
	PrimaryButton ButtonStyle = "bg-blue-600 enabled:hover:bg-blue-700 dark:enabled:hover:bg-blue-500 enabled:active:bg-blue-800 dark:enabled:active:bg-blue-400 border-blue-600 enabled:hover:border-blue-700 dark:enabled:hover:border-blue-500 enabled:active:border-blue-800 dark:enabled:active:border-blue-400 text-neutral-100"

	SecondaryButton ButtonStyle = "bg-slate-500 enabled:hover:bg-slate-600 dark:enabled:hover:bg-slate-400 enabled:active:bg-slate-700 dark:enabled:active:bg-slate-300 border-slate-500 enabled:hover:border-slate-600 dark:enabled:hover:border-slate-400 enabled:active:border-slate-700 dark:enabled:active:border-slate-300 text-neutral-100"

	DangerButton ButtonStyle = "bg-red-600 enabled:hover:bg-red-700 dark:enabled:hover:bg-red-500 enabled:active:bg-red-800 dark:enabled:active:bg-red-400 border-red-600 enabled:hover:border-red-700 dark:enabled:hover:border-red-500 enabled:active:border-red-800 dark:enabled:active:border-red-400 text-neutral-100"

	SuccessButton ButtonStyle = "bg-green-600 enabled:hover:bg-green-700 dark:enabled:hover:bg-green-500 enabled:active:bg-green-800 dark:enabled:active:bg-green-400 border-green-600 enabled:hover:border-green-700 dark:enabled:hover:border-green-500 enabled:active:border-green-800 dark:enabled:active:border-green-400 text-neutral-100"

	WarningButton ButtonStyle = "bg-amber-500 enabled:hover:bg-amber-600 dark:enabled:hover:bg-amber-400 enabled:active:bg-amber-700 dark:enabled:active:bg-amber-300 border-amber-500 enabled:hover:border-amber-600 dark:enabled:hover:border-amber-400 enabled:active:border-amber-700 dark:enabled:active:border-amber-300 text-neutral-900"

	InfoButton ButtonStyle = "bg-cyan-600 enabled:hover:bg-cyan-700 dark:enabled:hover:bg-cyan-500 enabled:active:bg-cyan-800 dark:enabled:active:bg-cyan-400 border-cyan-600 enabled:hover:border-cyan-700 dark:enabled:hover:border-cyan-500 enabled:active:border-cyan-800 dark:enabled:active:border-cyan-400 text-neutral-100"

	ContrastButton ButtonStyle = "bg-neutral-900 dark:bg-neutral-100 enabled:hover:bg-neutral-800 dark:enabled:hover:bg-neutral-200 enabled:active:bg-neutral-700 dark:enabled:active:bg-neutral-300 border-neutral-900 dark:border-neutral-100 enabled:hover:border-neutral-800 dark:enabled:hover:border-neutral-200 enabled:active:border-neutral-700 dark:enabled:active:border-neutral-300 text-neutral-100 dark:text-neutral-900"
)

type ButtonProps struct {
	Border           themes.BorderStyle     // Optional: Specifies the border style, defaults to Square.
	Class            string                 // Optional: Additional classes, tailwind classes specified here will take precedence in the event of a clash.
	Disabled         bool                   // Optional: Applies disabled style to the button.
	FullWidth        bool                   // Optional: Makes the button take the full width available.
	ID               string                 // Optional: Specifies the ID of the button.
	Outline          bool                   // Optional: Makes the background of the button transparent
	Size             themes.FormControlSize // Optional: Specifies the button size, defaults to MediumButton.
	Style            ButtonStyle            // Optional: Specifies the button style, for more granular control, use overide styles using the Class property.
	Type             ButtonType             // Optional: Specifies the button type, defaults to button.
	templ.Attributes                        // Optional: Specifies additional element attributes.
}

// Button renders a html <button> element.
func Button(props ButtonProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var2 = []any{
			tw.Merge(
				"inline-flex items-center gap-1 enabled:cursor-pointer align-middle disabled:greyscale-75 disabled:opacity-75",
				string(lib.Coalesce(props.Size, themes.MediumFormControl)),
				string(lib.Coalesce(props.Style, ContrastButton)),
				string(lib.Coalesce(props.Border, themes.Square)),
				lib.IIF(props.FullWidth, "w-full", ""),
				lib.IIF(props.Outline, "bg-transparent dark:bg-transparent not-[:hover,:active]:text-inverse", ""),
				props.Class,
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<button type=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(lib.Coalesce(string(props.Type), "button"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/button.templ`, Line: 48, Col: 51}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.ID != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, " id=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(props.ID)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/button.templ`, Line: 50, Col: 16}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/ui/button.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, props.Attributes)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, ">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</button>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate

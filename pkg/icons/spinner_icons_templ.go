// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package icons

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/dimmerz92/templwind/pkg/lib"
import "github.com/dimmerz92/templwind/pkg/themes"
import "fmt"
import tw "github.com/Oudwins/tailwind-merge-go/pkg/twmerge"

type SpinnerIcon string

const (
	SimpleSpinner SpinnerIcon = "border-5 rounded-full border-current border-b-spinner-accent animate-spin"

	GrowingSpinner SpinnerIcon = "relative rounded-full animate-spin before:absolute before:content-[''] before:inset-0 before:border-5 before:border-current before:rounded-full before:animate-[growing_3s_linear_infinite] after:absolute after:content-[''] after:inset-0 after:border-5 after:border-spinner-accent after:rounded-full after:animate-[growing_3s_linear_infinite] after:rotate-y-180 after:rotate-z-90"

	PulsingSpinner SpinnerIcon = "relative before:absolute before:content-[''] before:h-full before:w-full before:border-2 before:border-spinner-accent before:rounded-full before:top-0 before:left-0 before:animate-[pulsing_2s_linear_infinite] after:absolute after:content-[''] after:h-full after:w-full after:border-2 after:border-spinner-accent after:rounded-full after:top-0 after:left-0 after:animate-[pulsing_2s_linear_infinite]"

	DynamicDotSpinner SpinnerIcon = "relative top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 h-[1em] w-[1em] text-spinner-accent rounded-full indent-[-9999em] animate-[dynamicdots_1.3s_linear_infinite]"

	StaticDotSpinner SpinnerIcon = "relative top-1/2 -translate-y-1/2 left-1/2 -translate-x-1/2 h-[1em] w-[1em] text-spinner-accent rounded-full indent-[-9999em] animate-[staticdots_1.1s_ease_infinite]"
)

type SpinnerSize string

const (
	XXSmallSpinner SpinnerSize = "h-4 w-4 text-[2px]"
	XSmallSpinner  SpinnerSize = "h-6 w-6 text-[3px]"
	SmallSpinner   SpinnerSize = "h-8 w-8 text-[4px]"
	MediumSpinner  SpinnerSize = "h-10 w-10 text-[5px]"
	LargeSpinner   SpinnerSize = "h-12 w-12 text-[6px]"
	XLargeSpinner  SpinnerSize = "h-14 w-14 text-[7px]"
	XXLargeSpinner SpinnerSize = "h-16 w-16 text-[8px]"
)

type SpinnerProps struct {
	AccentColor themes.TailwindColor // Optional: Specifies the spinner accent color, defaults to Blue600.
	MainColor   themes.TailwindColor // Optional: Specifies the spinner main color, defaults to current.
	Icon        SpinnerIcon          // Optional: Specifies the spinner icon to use, defaults to SimpleSpinner.
	Size        SpinnerSize          // Optional: Specifies the spinner size, defaults to XSmallSpinner.
}

// Spinner renders an animated spinner for a variety of loading contexts
func Spinner(props SpinnerProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"inline-block align-middle\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 = []any{string(lib.Coalesce(props.Size, XSmallSpinner))}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/icons/spinner_icons.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 = []any{
			tw.Merge(
				"inline-block",
				string(lib.Coalesce(props.Size, XSmallSpinner)),
				string(lib.Coalesce(props.Icon, SimpleSpinner)),
			),
		}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var4...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<span")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if props.AccentColor != "" || props.MainColor != "" {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, " style=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(
				fmt.Sprintf(
					"%s%s",
					fmt.Sprintf("--color-spinner-accent: %s;", string(lib.Coalesce(props.AccentColor, themes.Blue500))),
					lib.IIF(props.MainColor != "", fmt.Sprintf("color: %s", props.MainColor), ""),
				),
			)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/icons/spinner_icons.templ`, Line: 53, Col: 5}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, " class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var4).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `pkg/icons/spinner_icons.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "\"></span></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
